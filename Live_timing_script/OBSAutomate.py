import obsws_python as obs
import time
import random
import re

class transition():
    glissement = "Glissement"
    fondu = "Fondu"

class Scene():
    def __init__(self, name:str, minTime:int=None, maxTime:int=None, autoSwitch=True, Transition = transition.fondu) -> None:
        self.name = name
        self.minTime = minTime
        self.maxTime = maxTime
        self.allowedAutoSwitch = autoSwitch
        self.Transition = Transition
    
    def getDelay(self):
        return random.randint(self.minTime,self.maxTime)

class OBS_Auto():
    ManualSceneList = {
        "V_Grille"        :Scene("V_Grille", 30,75, autoSwitch=False), 
        "Serie_T_"           :Scene("Serie_T_", 30,75, autoSwitch=False), 
        "V_Vue_Plafond_A_30_45"           :Scene("V_Vue_Plafond_A_30_45", 30,75, autoSwitch=False), 
        "Resultats"         :Scene("Resultats", 30,75, autoSwitch=False, Transition=transition.glissement)
    }
    autoSceneList = None

    AutoScenePattern =pattern = re.compile(r'_A_(\d+)_(\d+)')


    def __init__(self, IP, PassWord, Port=4455, debug=False, verbose=False) -> None:
        self.wsHhost = IP
        self.wsPort = Port
        self.wsPW = PassWord
        self.debug = debug
        self.verbose = verbose
        if not debug:
            self.OBS = obs.ReqClient(host=self.wsHhost, port=self.wsPort, password=self.wsPW, timeout=3)
        self.initialize()

    def initialize(self):
        self.previousTime = time.time()
        self.sceneDelay = 0
        self.init = True
        self.preventPodium = False
        self.toScene = None
        self.autoSwitchEnabled = True
        self.preventPodium = True
        self.AutoSwitchDelay = 0
        self.fromScene = None
        self.temporaryBlock = False

    def setScene(self, scene:Scene):
        try:
            self.OBS.set_current_scene_transition(self.toScene.Transition)
            self.OBS.set_current_program_scene(self.toScene.name)
        except:
            print("Failed switching scene")
    
    def updateAutoSceneList(self, InitialSceneList):
        # Extract all scene for which name matches "Name_A_xx_yy" and put them in auto switch list
        self.autoSceneList = []

        for scene in InitialSceneList:
            try:
                match = self.AutoScenePattern.search(scene['sceneName'])
                if match:
                    min_time, max_time = match.groups()
                    s = Scene(scene['sceneName'], int(min_time), int(max_time), autoSwitch=True)
                    self.autoSceneList.append(s)
            except KeyError:
                print("Issue with Scene list format, ensure it is generated by OBS.get_scene_list().scenes")
            except ValueError:
                print("Error while parsing scene durations, not adding scene to list.")
            
    def updateScene(self, ForceScene=None, ForceDuration=30, Block=False):
        if (time.time() - self.previousTime > self.AutoSwitchDelay and self.autoSwitchEnabled) or (ForceScene is not None and not self.temporaryBlock):
            self.previousTime = time.time()

            if "_B_" in self.OBS.get_current_program_scene().scene_name:
                print("Currently in blocking scene, no auto switch. Check again in 5s.")
                self.AutoSwitchDelay = 5
                return False
            
            if "_T_" in self.OBS.get_current_program_scene().scene_name:
                if not self.temporaryBlock:
                    self.temporaryBlock = True
                    print("Currently in temporary blocking scene, no auto switch. Check again in 10s.")
                    self.AutoSwitchDelay = 10
                    return False
                else:
                    self.temporaryBlock = False
            
            if ForceScene is not None:
                self.toScene = ForceScene
                self.AutoSwitchDelay=ForceDuration
            else:
                self.updateAutoSceneList(self.OBS.get_scene_list().scenes)
                self.toScene = self.autoSceneList[random.randint(1*self.preventPodium,len(self.autoSceneList)-1)]
                while (not self.toScene.allowedAutoSwitch) and self.fromScene == self.toScene:
                    self.toScene = self.autoSceneList[random.randint(1*self.preventPodium,len(self.autoSceneList)-1)]
                self.AutoSwitchDelay = self.toScene.getDelay()
            self.fromScene = self.toScene

            if not self.debug:
                self.setScene(self.toScene)

            if self.verbose:
                print(f"Switching from {self.fromScene.name} to {self.toScene.name}. Next switch in {self.AutoSwitchDelay}s.")
            return True

    def showStatistics(self, ForceDuration=30):
        self.updateScene(ForceScene=self.ManualSceneList["StatisticsDisplay"], ForceDuration=ForceDuration)